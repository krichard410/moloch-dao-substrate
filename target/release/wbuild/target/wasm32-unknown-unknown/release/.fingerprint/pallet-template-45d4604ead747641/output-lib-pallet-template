{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2100,"byte_end":2109,"line_start":77,"line_end":77,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"    pub enum Event<T> where Balance = BalanceOf<T>, <T as system::Trait>::AccountId {","highlight_start":39,"highlight_end":48}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:77:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub enum Event<T> where Balance = BalanceOf<T>, <T as system::Trait>::AccountId {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2346,"byte_end":2350,"line_start":83,"line_end":83,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"\t\tAborted(Hash, Balance, AccountId, AccountId),","highlight_start":11,"highlight_end":15}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:83:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Aborted(Hash, Balance, AccountId, AccountId),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2396,"byte_end":2400,"line_start":84,"line_end":84,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"\t\tProcessed(Hash, Balance, AccountId, bool),","highlight_start":13,"highlight_end":17}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:84:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Processed(Hash, Balance, AccountId, bool),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2502,"byte_end":2506,"line_start":86,"line_end":86,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"\t\tVoted(Hash, bool, u32, u32),","highlight_start":9,"highlight_end":13}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:86:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Voted(Hash, bool, u32, u32),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2599,"byte_end":2603,"line_start":88,"line_end":88,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"\t\tProposed(Hash, Balance, AccountId, AccountId),","highlight_start":12,"highlight_end":16}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:88:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Proposed(Hash, Balance, AccountId, AccountId),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":3673,"byte_end":3682,"line_start":124,"line_end":124,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"\t\tProposalFee get(fn proposal_fee) config(): BalanceOf<T>;","highlight_start":46,"highlight_end":55}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:124:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        ProposalFee get(fn proposal_fee) config(): BalanceOf<T>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":3734,"byte_end":3743,"line_start":125,"line_end":125,"column_start":48,"column_end":57,"is_primary":true,"text":[{"text":"\t\tProposalBond get(fn proposal_bond) config(): BalanceOf<T>;","highlight_start":48,"highlight_end":57}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:125:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        ProposalBond get(fn proposal_bond) config(): BalanceOf<T>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":3853,"byte_end":3862,"line_start":127,"line_end":127,"column_start":105,"column_end":114,"is_primary":true,"text":[{"text":"\t\tProposals get(fn proposals): map hasher(blake2_128_concat) T::Hash => Proposal<T::Hash, T::AccountId, BalanceOf<T>, T::BlockNumber>; ","highlight_start":105,"highlight_end":114}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:127:105\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Proposals get(fn proposals): map hasher(blake2_128_concat) T::Hash => Proposal<T::Hash, T::AccountId, BalanceOf<T>, T::BlockNumber>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `AccountId` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":6334,"byte_end":6343,"line_start":205,"line_end":205,"column_start":33,"column_end":42,"is_primary":true,"text":[{"text":"\t\tfn propose(origin, applicant: AccountId, shares: u32, tokenTribute: BalanceOf<T>) {","highlight_start":33,"highlight_end":42}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `AccountId` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:205:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        fn propose(origin, applicant: AccountId, shares: u32, tokenTribute: BalanceOf<T>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":6372,"byte_end":6381,"line_start":205,"line_end":205,"column_start":71,"column_end":80,"is_primary":true,"text":[{"text":"\t\tfn propose(origin, applicant: AccountId, shares: u32, tokenTribute: BalanceOf<T>) {","highlight_start":71,"highlight_end":80}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:205:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        fn propose(origin, applicant: AccountId, shares: u32, tokenTribute: BalanceOf<T>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `time` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":6577,"byte_end":6581,"line_start":209,"line_end":209,"column_start":72,"column_end":76,"is_primary":true,"text":[{"text":"\t\t\tlet prop = Proposal::new(&sender, &applicant, shares, tokenTribute, time);","highlight_start":72,"highlight_end":76}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `time` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:209:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let prop = Proposal::new(&sender, &applicant, shares, tokenTribute, time);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":6811,"byte_end":6815,"line_start":219,"line_end":219,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"\t\tfn vote(origin, hash: Hash, approve: bool) {","highlight_start":25,"highlight_end":29}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:219:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        fn vote(origin, hash: Hash, approve: bool) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"expected type, found derive macro `Hash`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":6887,"byte_end":6891,"line_start":223,"line_end":223,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"\t\tfn process(origin, hash: Hash) {","highlight_start":28,"highlight_end":32}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::system::vec::Hash;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":44,"byte_end":44,"line_start":3,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use frame_support::{","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use sp_std::hash::Hash;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m: expected type, found derive macro `Hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:223:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        fn process(origin, hash: Hash) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse core::hash::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::system::vec::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_std::hash::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":44548,"byte_end":44569,"line_start":1306,"line_end":1306,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":12,"highlight_end":33}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs:1306:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        #[derive($crate::codec::Encode, $crate::codec::Decode)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `BalanceOf` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":44571,"byte_end":44592,"line_start":1306,"line_end":1306,"column_start":35,"column_end":56,"is_primary":true,"text":[{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":35,"highlight_end":56}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BalanceOf` in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs:1306:35\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        #[derive($crate::codec::Encode, $crate::codec::Decode)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"type `base` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":936,"byte_end":940,"line_start":39,"line_end":39,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct base<AccountId, Balance> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":936,"byte_end":940,"line_start":39,"line_end":39,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct base<AccountId, Balance> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":"Base","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `base` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:39:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct base<AccountId, Balance> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Base`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"duplicate definitions with name `voting_period`","code":{"code":"E0592","explanation":"This error occurs when you defined methods or associated functions with same\nname.\n\nErroneous code example:\n\n```compile_fail,E0592\nstruct Foo;\n\nimpl Foo {\n    fn bar() {} // previous definition here\n}\n\nimpl Foo {\n    fn bar() {} // duplicate definition here\n}\n```\n\nA similar error is E0201. The difference is whether there is one declaration\nblock or not. To avoid this error, you must give each `fn` a unique name.\n\n```\nstruct Foo;\n\nimpl Foo {\n    fn bar() {}\n}\n\nimpl Foo {\n    fn baz() {} // define with different name\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2832,"byte_end":4083,"line_start":102,"line_end":132,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"decl_storage! {","highlight_start":1,"highlight_end":16},{"text":"    trait Store for Module<T: Trait> as MolochTemplate {","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tMembers get(fn members): Vec<Member>;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Proposals get(fn proposals): map hasher(blake2_128_concat) ProposalIndex => ProposalInfo<T::AccountId, T::BlockNumber>;","highlight_start":1,"highlight_end":125},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposalCount get(fn proposal_count): ProposalIndex;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tTokens get(fn tokens): map hasher(blake2_128_concat) TokenIndex => TokenCreation;","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tTokenCount get(fn token_count): TokenIndex;","highlight_start":1,"highlight_end":46},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t \t//Balances get(fn get_balance): map hasher(blake2_128_concat) T::AccountId => u64;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        TotalSupply get(fn total_supply): u64 = 21000000;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tDidInit get(fn is_init): bool;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tVotingPeriod get(fn voting_period) config(): T::BlockNumber;","highlight_start":1,"highlight_end":63},{"text":"\t\tAbortWindow get(fn abort_window) config(): T::BlockNumber;","highlight_start":1,"highlight_end":61},{"text":"\t\tGracePeriod get(fn grace_period) config(): T::BlockNumber;","highlight_start":1,"highlight_end":61},{"text":"\t\tProposalFee get(fn proposal_fee) config(): BalanceOf<T>;","highlight_start":1,"highlight_end":59},{"text":"\t\tProposalBond get(fn proposal_bond) config(): BalanceOf<T>;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposals get(fn proposals): map hasher(blake2_128_concat) T::Hash => Proposal<T::Hash, T::AccountId, BalanceOf<T>, T::BlockNumber>; ","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposalsFor get(fn proposals_for): map hasher(blake2_128_concat) T::AccountId => Vec<T::Hash>;","highlight_start":1,"highlight_end":98},{"text":"\t\tVotersFor get(fn voters_for): map hasher(blake2_128_concat) T::Hash => Vec<T::AccountId>;","highlight_start":1,"highlight_end":92},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"duplicate definitions for `voting_period`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":2832,"byte_end":4083,"line_start":102,"line_end":132,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_storage! {","highlight_start":1,"highlight_end":16},{"text":"    trait Store for Module<T: Trait> as MolochTemplate {","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tMembers get(fn members): Vec<Member>;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Proposals get(fn proposals): map hasher(blake2_128_concat) ProposalIndex => ProposalInfo<T::AccountId, T::BlockNumber>;","highlight_start":1,"highlight_end":125},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposalCount get(fn proposal_count): ProposalIndex;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tTokens get(fn tokens): map hasher(blake2_128_concat) TokenIndex => TokenCreation;","highlight_start":1,"highlight_end":84},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tTokenCount get(fn token_count): TokenIndex;","highlight_start":1,"highlight_end":46},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t \t//Balances get(fn get_balance): map hasher(blake2_128_concat) T::AccountId => u64;","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        TotalSupply get(fn total_supply): u64 = 21000000;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tDidInit get(fn is_init): bool;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tVotingPeriod get(fn voting_period) config(): T::BlockNumber;","highlight_start":1,"highlight_end":63},{"text":"\t\tAbortWindow get(fn abort_window) config(): T::BlockNumber;","highlight_start":1,"highlight_end":61},{"text":"\t\tGracePeriod get(fn grace_period) config(): T::BlockNumber;","highlight_start":1,"highlight_end":61},{"text":"\t\tProposalFee get(fn proposal_fee) config(): BalanceOf<T>;","highlight_start":1,"highlight_end":59},{"text":"\t\tProposalBond get(fn proposal_bond) config(): BalanceOf<T>;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposals get(fn proposals): map hasher(blake2_128_concat) T::Hash => Proposal<T::Hash, T::AccountId, BalanceOf<T>, T::BlockNumber>; ","highlight_start":1,"highlight_end":136},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tProposalsFor get(fn proposals_for): map hasher(blake2_128_concat) T::AccountId => Vec<T::Hash>;","highlight_start":1,"highlight_end":98},{"text":"\t\tVotersFor get(fn voters_for): map hasher(blake2_128_concat) T::Hash => Vec<T::AccountId>;","highlight_start":1,"highlight_end":92},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_storage!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/procedural/src/lib.rs","byte_start":9801,"byte_end":9894,"line_start":236,"line_end":238,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn decl_storage(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":1},{"text":"\tstorage::decl_storage_impl(input)","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":41028,"byte_end":41220,"line_start":1177,"line_end":1183,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"\t\t$vis fn $name(","highlight_start":3,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4}],"label":"other definition for `voting_period`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":47448,"byte_end":47766,"line_start":1398,"line_end":1408,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":5,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":33379,"byte_end":33855,"line_start":965,"line_end":979,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@imp","highlight_start":3,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":28073,"byte_end":28795,"line_start":816,"line_end":840,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":28073,"byte_end":28795,"line_start":816,"line_end":840,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":13376,"byte_end":13881,"line_start":358,"line_end":372,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":25610,"byte_end":26112,"line_start":736,"line_end":752,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11698,"byte_end":12033,"line_start":288,"line_end":304,"column_start":3,"column_end":5,"is_primary":false,"text":[{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":3,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs","byte_start":4124,"byte_end":10417,"line_start":134,"line_end":335,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"    /// The module declaration.","highlight_start":1,"highlight_end":32},{"text":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":72},{"text":"        // Initializing errors","highlight_start":1,"highlight_end":31},{"text":"        type Error = Error<T>;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // A default function for depositing events","highlight_start":1,"highlight_end":52},{"text":"        fn deposit_event() = default;","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// const StartingPeriod: T::BlockNumber = T::StartingPeriod::get();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// const VotingPeriod: T::BlockNumber = T::VotingPeriod::get();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn init(origin) {","highlight_start":1,"highlight_end":20},{"text":"\t\t\t// let sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t// ensure!(!DidInit::exists(), <Error<T>>::AlreadyInitialized);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // TODO. Rewrite this part","highlight_start":1,"highlight_end":33},{"text":"\t\t\t// let mut current_members = Self::members();","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let new_member = Member {","highlight_start":1,"highlight_end":32},{"text":"\t\t\t// \texists: true,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t// \thighest_index_yes_vote: 0,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t// };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// current_members.insert(0, new_member);","highlight_start":1,"highlight_end":45},{"text":"\t\t\t// Members::put(current_members);","highlight_start":1,"highlight_end":37},{"text":"\t\t\t// <Balances<T>>::insert(sender, Self::total_supply());","highlight_start":1,"highlight_end":59},{"text":"\t\t\t// DidInit::put(true);","highlight_start":1,"highlight_end":26},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn create_proposal(origin) {","highlight_start":1,"highlight_end":31},{"text":"\t\t\t// let sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t// //ensure!(DidInit::exists() && Self::is_init(), <Error<T>>::NotInit);","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let starting_period;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t// starting_period = <system::Module<T>>::block_number() + T::StartingPeriod::get();","highlight_start":1,"highlight_end":88},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let index = ProposalCount::get();","highlight_start":1,"highlight_end":40},{"text":"\t\t\t// let next_index = index.checked_add(1).ok_or(Error::<T>::Overflow)?;","highlight_start":1,"highlight_end":74},{"text":"\t\t\t// ProposalCount::put(next_index);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let index_token = TokenCount::get();","highlight_start":1,"highlight_end":43},{"text":"\t\t\t// let following_index = index_token.checked_add(1).ok_or(Error::<T>::Overflow)?;","highlight_start":1,"highlight_end":85},{"text":"\t\t\t// TokenCount::put(following_index);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let new_proposal = ProposalInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t// \tproposer: sender.clone(),","highlight_start":1,"highlight_end":33},{"text":"\t\t\t// \tstarting_period: starting_period,","highlight_start":1,"highlight_end":41},{"text":"\t\t\t// \t// TODO. Write another module for the token creation","highlight_start":1,"highlight_end":60},{"text":"\t\t\t// \tyes_votes: 0,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t// \tno_votes: 0,","highlight_start":1,"highlight_end":20},{"text":"\t\t\t// \tprocessed: false,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t// \tdid_pass: false,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t// \taborted: false,","highlight_start":1,"highlight_end":23},{"text":"\t\t\t// };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let new_tokens = TokenCreation {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t// \ttribute_token: 0,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t// \tpayment_token: 0,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t// };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// <Tokens>::insert(index_token, new_tokens);","highlight_start":1,"highlight_end":49},{"text":"\t\t\t// <Proposals<T>>::insert(index, new_proposal);","highlight_start":1,"highlight_end":51},{"text":"\t\t\t//Self::deposit_event(RawEvent::CreateProposal(index, sender));","highlight_start":1,"highlight_end":67},{"text":"\t\t\t//Self::deposit_event(RawEvent::CreateToken(index, sender));","highlight_start":1,"highlight_end":64},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn propose(origin, applicant: AccountId, shares: u32, tokenTribute: BalanceOf<T>) {","highlight_start":1,"highlight_end":86},{"text":"\t\t\tlet sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":40},{"text":"\t\t\tensure!(Self::is_member(&sender), \"proposer is not a member of the Dao\");","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet prop = Proposal::new(&sender, &applicant, shares, tokenTribute, time);","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::proposals::insert(prop.base_hash, prop);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// add if member is sponsoring a proposal","highlight_start":1,"highlight_end":45},{"text":"\t\t\tSelf::proposals_for::mutate(&sender, |props| props.push(prop.base_hash));","highlight_start":1,"highlight_end":77},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn vote(origin, hash: Hash, approve: bool) {","highlight_start":1,"highlight_end":47},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn process(origin, hash: Hash) {","highlight_start":1,"highlight_end":35},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn voting_period(origin) {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t// let sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let starting_period = <system::Module<T>>::block_number() + T::StartingPeriod::get();","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// start_period = CURRENT_BLOCK_NUMBER;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t// end_period = start_period * NUMBER_OF_BLOCKS;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let canVote : bool;","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // TODO. Have the starting period available for only 7 days - BUG HERE","highlight_start":1,"highlight_end":77},{"text":"\t\t\t// if canVote {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t// \tcanVote = false;","highlight_start":1,"highlight_end":24},{"text":"\t\t\t// }","highlight_start":1,"highlight_end":8},{"text":"\t\t\t// else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t// \tcanVote = true;","highlight_start":1,"highlight_end":23},{"text":"\t\t\t// }","highlight_start":1,"highlight_end":8},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/*","highlight_start":1,"highlight_end":5},{"text":"\t\t\tMembers can submit votes on proposals that were submitted, ","highlight_start":1,"highlight_end":63},{"text":"\t\t\tproposals can pass if there is a majority vote, even if only ","highlight_start":1,"highlight_end":65},{"text":"\t\t\tone person voted. ","highlight_start":1,"highlight_end":22},{"text":"\t\t*/","highlight_start":1,"highlight_end":5},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn submit_vote(origin, unit_vote: u8){","highlight_start":1,"highlight_end":41},{"text":"\t\t\t// let sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let starting_period = <system::Module<T>>::block_number() + T::StartingPeriod::get();","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let voting_expired_period = starting_period + T::VotingPeriod::get();","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let proposal_index = ProposalCount::get();","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let member = <Members>::get();","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let proposal = <ProposalInfo>::get();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // TODO - grab the value of the votes from the struct properly","highlight_start":1,"highlight_end":69},{"text":"\t\t\t// let mut yesVotes = Self::proposal.yes_votes;","highlight_start":1,"highlight_end":51},{"text":"\t\t\t// let mut noVotes = Self::proposal.no_votes;","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // ensure!(unit_vote == 0 || unit_vote == 1, \"Vote must be either 0(Yes) or 1(No)\");","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // Vote is counted as yes (0)","highlight_start":1,"highlight_end":36},{"text":"\t\t\t// if unit_vote == 0 {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t// \t// Increase value of total yes votes for a specific proposal","highlight_start":1,"highlight_end":68},{"text":"\t\t\t// \t// (ProposalInfo.yes_votes : ProposalInfo).yes_votes + 1;","highlight_start":1,"highlight_end":65},{"text":"\t\t\t// \tyesVotes += 1;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t// \t// if proposal_index >= member.highest_index_yes_vote {","highlight_start":1,"highlight_end":63},{"text":"\t\t\t// \t// \tmember.highest_index_yes_vote = proposal_index;","highlight_start":1,"highlight_end":59},{"text":"\t\t\t// \t// }","highlight_start":1,"highlight_end":12},{"text":"\t\t\t// // Vote is counted as no (0)","highlight_start":1,"highlight_end":35},{"text":"\t\t\t// } else {","highlight_start":1,"highlight_end":15},{"text":"\t\t\t// \tnoVotes += 1;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t// };","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t//Self::deposit_event(RawEvent::SubmitVote(proposal_index, sender, unit_vote));","highlight_start":1,"highlight_end":83},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// if no vote, account take back shares, loss in voting power","highlight_start":1,"highlight_end":64},{"text":"\t\t// if account take back all shares, no longer a member","highlight_start":1,"highlight_end":57},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn rage_quit(origin){","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet sender = ensure_signed(origin)?;","highlight_start":1,"highlight_end":40},{"text":"\t\t\tensure!(Self::is_member(&sender), \"proposer is not a member of DAO\");","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(Self::proposals_for::get(&sender).is_empty(), \"all proposals have not passed or exited the grace period\");","highlight_start":1,"highlight_end":118},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\t//TODO add more details for storage here","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let voting_power = bool;","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// // heavy refactor","highlight_start":1,"highlight_end":24},{"text":"\t\t\t// if member && yes_votes && no_votes == 0 {","highlight_start":1,"highlight_end":48},{"text":"\t\t\t// \tvoting_power = false;","highlight_start":1,"highlight_end":29},{"text":"\t\t\t// } ","highlight_start":1,"highlight_end":9},{"text":"\t\t\t// else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t// \tvoting_power = false;","highlight_start":1,"highlight_end":29},{"text":"\t\t\t// \tlet member = Member {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t// \t\texists: false,","highlight_start":1,"highlight_end":23},{"text":"\t\t\t// \t\thighest_index_yes_vote: 0,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t// \t};","highlight_start":1,"highlight_end":10},{"text":"\t\t\t// }","highlight_start":1,"highlight_end":8},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/*","highlight_start":1,"highlight_end":5},{"text":"\t\t\tMembers can also propose trades to swap tokens OTC with the guild bank, ","highlight_start":1,"highlight_end":76},{"text":"\t\t\twhich could be used for making investments, active portfolio management, ","highlight_start":1,"highlight_end":77},{"text":"\t\t\tselloffs, or just to top off a stablecoin reserve used to pay for planned expenses","highlight_start":1,"highlight_end":86},{"text":"\t\t*/","highlight_start":1,"highlight_end":5},{"text":"\t\t#[weight = 10_000]","highlight_start":1,"highlight_end":21},{"text":"\t\tfn transfer(_origin, to: T::AccountId, value: u64) {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t// let sender = ensure_signed(_origin)?;","highlight_start":1,"highlight_end":44},{"text":"\t\t\t// let sender_balance = Self::get_balance(&sender);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// //Receiver balance reffering to 'guild bank'","highlight_start":1,"highlight_end":51},{"text":"\t\t\t// let receiver_balance = Self::get_balance(&to);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// let updated_from_balance = sender_balance.checked_sub(value).ok_or(<Error<T>>::InsufficientFunds)?;","highlight_start":1,"highlight_end":106},{"text":"\t\t\t// let updated_to_balance = receiver_balance.checked_add(value).expect(\"Entire supply fits in u64; qed\");","highlight_start":1,"highlight_end":109},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// <Balances<T>>::insert(&sender, updated_from_balance);","highlight_start":1,"highlight_end":60},{"text":"\t\t\t// <Balances<T>>::insert(&to, updated_to_balance);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// Self::deposit_event(RawEvent::Transfer(sender, to, value));","highlight_start":1,"highlight_end":66},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"/Users/kirstenrichard/.cargo/git/checkouts/substrate-7e08433d4c370a21/34695a8/frame/support/src/dispatch.rs","byte_start":11348,"byte_end":54227,"line_start":276,"line_end":1613,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! decl_module {","highlight_start":1,"highlight_end":27},{"text":"\t// Entry point #1.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty $(, $where_ty:ty: $where_bound:path )* {","highlight_start":1,"highlight_end":99},{"text":"\t\t\t$( $t:tt )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":90},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = system","highlight_start":1,"highlight_end":67},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Entry point #2.","highlight_start":1,"highlight_end":20},{"text":"\t(","highlight_start":1,"highlight_end":3},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$( <I>, I: $instantiable:path $( = $module_default_instance:path )? )?","highlight_start":1,"highlight_end":74},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where","highlight_start":1,"highlight_end":34},{"text":"\t\t\torigin: $origin_type:ty,","highlight_start":1,"highlight_end":28},{"text":"\t\t\tsystem = $system:ident","highlight_start":1,"highlight_end":26},{"text":"\t\t\t$(, $where_ty:ty: $where_bound:path )*","highlight_start":1,"highlight_end":42},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$($t:tt)*","highlight_start":1,"highlight_end":13},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name $(<I>, I: $instantiable $( = $module_default_instance )? )?","highlight_start":1,"highlight_end":93},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $where_ty: $where_bound ),* }","highlight_start":1,"highlight_end":38},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t[]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$($t)*","highlight_start":1,"highlight_end":10},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Normalization expansions. Fills the defaults.","highlight_start":1,"highlight_end":50},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event() = default;","highlight_start":1,"highlight_end":41},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $vis fn deposit_event() = default; }","highlight_start":1,"highlight_end":42},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn deposit_event","highlight_start":1,"highlight_end":28},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\"","highlight_start":1,"highlight_end":111},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_finalize( $( $param_name : $param ),* ) { $( $impl )* }","highlight_start":1,"highlight_end":66},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_finalize, given weight removed syntax.","highlight_start":1,"highlight_end":60},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_finalize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":82},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_finalize` can't be given weight attribute anymore, weight must be returned by \\","highlight_start":1,"highlight_end":88},{"text":"\t\t\t`on_initialize` or `on_runtime_upgrade` instead\"","highlight_start":1,"highlight_end":52},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, without a given weight removed syntax.","highlight_start":1,"highlight_end":77},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":69},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_runtime_upgrade, given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":89},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_runtime_upgrade` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":92},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_runtime_upgrade( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":103},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_runtime_upgrade( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, without a given weight removed syntax.","highlight_start":1,"highlight_end":72},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` must return Weight, signature has changed.\"","highlight_start":1,"highlight_end":64},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// compile_error on_initialize, with given weight removed syntax.","highlight_start":1,"highlight_end":67},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":84},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"`on_initialize` can't be given weight attribute anymore, weight must be returned \\","highlight_start":1,"highlight_end":87},{"text":"\t\t\tby the function directly.\"","highlight_start":1,"highlight_end":30},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":110},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn on_initialize( $( $param_name:ident : $param:ty ),* $(,)? ) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":98},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tfn on_initialize( $( $param_name : $param ),* ) -> $return { $( $impl )* }","highlight_start":1,"highlight_end":79},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":70},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\tfn offchain_worker( $( $param_name:ident : $param:ty ),* $(,)? ) { $( $impl:tt )* }","highlight_start":1,"highlight_end":86},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":89},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ fn offchain_worker( $( $param_name : $param ),* ) { $( $impl )* } }","highlight_start":1,"highlight_end":73},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts a constant in the parsed constants list.","highlight_start":1,"highlight_end":55},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\tconst $name:ident: $ty:ty = $value:expr;","highlight_start":1,"highlight_end":43},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t$( <I>, $instance: $instantiable $(= $module_default_instance)? )?","highlight_start":1,"highlight_end":71},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $constants )*","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t$( #[doc = $doc_attr ] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t$name: $ty = $value;","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Parse error type","highlight_start":1,"highlight_end":21},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\ttype Error = $error_type:ty;","highlight_start":1,"highlight_end":31},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[ $( $dispatchables )* ]","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add default Error if none supplied","highlight_start":1,"highlight_end":39},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ }","highlight_start":1,"highlight_end":6},{"text":"\t\t[ $($t:tt)* ]","highlight_start":1,"highlight_end":16},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ &'static str }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t[ $($t)* ]","highlight_start":1,"highlight_end":14},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// This puts the function statement into the [], decreasing `$rest` and moving toward finishing the parse.","highlight_start":1,"highlight_end":108},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":27},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@normalize","highlight_start":1,"highlight_end":34},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$trait_instance: $trait_name$(<I>, $instance: $instantiable $(= $module_default_instance)?)?","highlight_start":1,"highlight_end":97},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system","highlight_start":1,"highlight_end":68},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $error_type }","highlight_start":1,"highlight_end":19},{"text":"\t\t\t[","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t#[weight = $weight]","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t$fn_vis fn $fn_name(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t$origin $( , $(#[$codec_attr])* $param_name : $param )*","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t{ $($instance: $instantiable)? }","highlight_start":1,"highlight_end":37},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5},{"text":"\t\t\t$($rest)*","highlight_start":1,"highlight_end":13},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Add #[weight] if none is defined.","highlight_start":1,"highlight_end":38},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident:","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":102},{"text":"\t\t\t>","highlight_start":1,"highlight_end":5},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$from:ident $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":86},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(concat!(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\"Missing weight for \", stringify!($ident),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\". Every dispatchable must have a #[weight] attribute.\"","highlight_start":1,"highlight_end":59},{"text":"\t\t\t)","highlight_start":1,"highlight_end":5},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is not `origin` with type `T::Origin`.","highlight_start":1,"highlight_end":66},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$origin:ident : T::Origin $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":100},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any ident which is `origin` but has a type, regardless of the type token itself.","highlight_start":1,"highlight_end":92},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\torigin : $origin:ty $( , $( #[$codec_attr:ident] )* $param_name:ident : $param:ty )* $(,)?","highlight_start":1,"highlight_end":94},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":89},{"text":"\t\t\t(a bit like `self`).\"","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Ignore any function missing `origin` as the first parameter.","highlight_start":1,"highlight_end":65},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":151},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(#[weight = $weight:expr])?","highlight_start":1,"highlight_end":31},{"text":"\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $(#[$codec_attr:ident])* $param_name:ident : $param:ty ),* $(,)?","highlight_start":1,"highlight_end":71},{"text":"\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":43},{"text":"\t\t$($rest:tt)*","highlight_start":1,"highlight_end":15},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\tcompile_error!(","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":67},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\"","highlight_start":1,"highlight_end":65},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"\t// Last normalize step. Triggers `@imp` expansion which is the real expansion.","highlight_start":1,"highlight_end":80},{"text":"\t(@normalize","highlight_start":1,"highlight_end":13},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":137},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident","highlight_start":1,"highlight_end":82},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $( $error_type:tt )* }","highlight_start":1,"highlight_end":27},{"text":"\t\t[ $( $dispatchables:tt )* ]","highlight_start":1,"highlight_end":30},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module!(@imp","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$(#[$attr])*","highlight_start":1,"highlight_end":16},{"text":"\t\t\tpub struct $mod_type<$trait_instance: $trait_name$(<I>, I: $instantiable $(= $module_default_instance)?)?>","highlight_start":1,"highlight_end":110},{"text":"\t\t\tfor enum $call_type where origin: $origin_type, system = $system {","highlight_start":1,"highlight_end":70},{"text":"\t\t\t\t$( $dispatchables )*","highlight_start":1,"highlight_end":25},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $deposit_event )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_initialize )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t\t{ $( $on_runtime_upgrade )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $on_finalize )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t\t{ $( $offchain )* }","highlight_start":1,"highlight_end":23},{"text":"\t\t\t{ $( $constants )* }","highlight_start":1,"highlight_end":24},{"text":"\t\t\t{ $( $error_type )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t);","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Implementation of Call enum's .dispatch() method.","highlight_start":1,"highlight_end":54},{"text":"\t// TODO: this probably should be a different macro?","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@call","highlight_start":1,"highlight_end":8},{"text":"\t\t$ignore:ident","highlight_start":1,"highlight_end":16},{"text":"\t\t$mod_type:ident<$trait_instance:ident $(, $instance:ident)?> $fn_name:ident $origin:ident $system:ident [ $( $param_name:ident),* ]","highlight_start":1,"highlight_end":134},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t<$mod_type<$trait_instance $(, $instance)?>>::$fn_name( $origin $(, $param_name )* ).map(Into::into).map_err(Into::into)","highlight_start":1,"highlight_end":123},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// no `deposit_event` function wanted","highlight_start":1,"highlight_end":39},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, I: $instantiable:path)?>;","highlight_start":1,"highlight_end":89},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {};","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_deposit_event","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$system:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t$vis:vis fn deposit_event$(<$event_trait_instance:ident $(, $event_instance:ident)?>)?() = default;","highlight_start":1,"highlight_end":102},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?> $module<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":111},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$vis fn deposit_event(","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tevent: impl Into<< $trait_instance as $trait_name $(<$instance>)? >::Event>","highlight_start":1,"highlight_end":80},{"text":"\t\t\t) {","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t<$system::Module<$trait_instance>>::deposit_event(event.into())","highlight_start":1,"highlight_end":68},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":54},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize(_block_number_not_used: $trait_instance::BlockNumber) -> $return {","highlight_start":1,"highlight_end":87},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_initialize($param:ident : $param_ty:ty) -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":81},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_initialize($param: $param_ty) -> $return {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_initialize\");","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_initialize","highlight_start":1,"highlight_end":22},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnInitialize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":62},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_runtime_upgrade() -> $return:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":59},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_runtime_upgrade() -> $return {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_runtime_upgrade\");","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":27},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnRuntimeUpgrade","highlight_start":1,"highlight_end":36},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize() { $( $impl:tt )* }","highlight_start":1,"highlight_end":38},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize(_block_number_not_used: $trait_instance::BlockNumber) {","highlight_start":1,"highlight_end":74},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn on_finalize($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":65},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn on_finalize($param: $param_ty) {","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t$crate::sp_tracing::enter_span!(\"on_finalize\");","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":20},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_on_finalize","highlight_start":1,"highlight_end":20},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OnFinalize<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":60},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker() { $( $impl:tt )* }","highlight_start":1,"highlight_end":42},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker(_block_number_not_used: $trait_instance::BlockNumber) { $( $impl )* }","highlight_start":1,"highlight_end":92},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\tfn offchain_worker($param:ident : $param_ty:ty) { $( $impl:tt )* }","highlight_start":1,"highlight_end":69},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn offchain_worker($param: $param_ty) { $( $impl )* }","highlight_start":1,"highlight_end":57},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@impl_offchain","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\timpl<$trait_instance: $trait_name$(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":70},{"text":"\t\t\t$crate::traits::OffchainWorker<$trait_instance::BlockNumber>","highlight_start":1,"highlight_end":64},{"text":"\t\t\tfor $module<$trait_instance$(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":79},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with no return type.","highlight_start":1,"highlight_end":67},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) { $( $impl:tt )* }","highlight_start":1,"highlight_end":23},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t#[allow(unreachable_code)]","highlight_start":1,"highlight_end":29},{"text":"\t\t$vis fn $name(","highlight_start":1,"highlight_end":17},{"text":"\t\t\t$origin: $origin_ty $(, $param: $param_ty )*","highlight_start":1,"highlight_end":48},{"text":"\t\t) -> $crate::dispatch::DispatchResult {","highlight_start":1,"highlight_end":42},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t{ $( $impl )* }","highlight_start":1,"highlight_end":19},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Expansion for _origin_ dispatch functions with explicit return type.","highlight_start":1,"highlight_end":73},{"text":"\t(@impl_function","highlight_start":1,"highlight_end":17},{"text":"\t\t$module:ident<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path)?>;","highlight_start":1,"highlight_end":103},{"text":"\t\t$origin_ty:ty;","highlight_start":1,"highlight_end":17},{"text":"\t\t$error_type:ty;","highlight_start":1,"highlight_end":18},{"text":"\t\t$ignore:ident;","highlight_start":1,"highlight_end":17},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$vis:vis fn $name:ident (","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$origin:ident $(, $param:ident : $param_ty:ty )*","highlight_start":1,"highlight_end":52},{"text":"\t\t) -> $result:ty { $( $impl:tt )* }","highlight_start":1,"highlight_end":37},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":25},{"text":"\t\t$vis fn $name($origin: $origin_ty $(, $param: $param_ty )* ) -> $result {","highlight_start":1,"highlight_end":76},{"text":"\t\t\t$crate::sp_tracing::enter_span!(stringify!($name));","highlight_start":1,"highlight_end":55},{"text":"\t\t\t$( $impl )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter that should be encoded `compact`.","highlight_start":1,"highlight_end":73},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$( #[doc = $doc_attr:tt] )*","highlight_start":1,"highlight_end":30},{"text":"\t\t#[compact]","highlight_start":1,"highlight_end":13},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t#[codec(compact)]","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// Declare a `Call` variant parameter.","highlight_start":1,"highlight_end":40},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$type:ty;","highlight_start":1,"highlight_end":12},{"text":"\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":17},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{ $( $generated_variants )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t$type,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$( #[doc = $doc_attr] )*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$( $rest )*","highlight_start":1,"highlight_end":15},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $current_params:tt )* }","highlight_start":1,"highlight_end":31},{"text":"\t\tvariant $fn_name:ident;","highlight_start":1,"highlight_end":26},{"text":"\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":28},{"text":"\t\t$(","highlight_start":1,"highlight_end":5},{"text":"\t\t\tvariant $next_fn_name:ident;","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$( $rest:tt )*","highlight_start":1,"highlight_end":18},{"text":"\t\t)?","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[allow(non_camel_case_types)]","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$fn_name (","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t$( $current_params )*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t),","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $next_fn_name;","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$( $rest )*","highlight_start":1,"highlight_end":16},{"text":"\t\t\t)?","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@create_call_enum","highlight_start":1,"highlight_end":20},{"text":"\t\t$call_type:ident;","highlight_start":1,"highlight_end":20},{"text":"\t\t<$trait_instance:ident: $trait_name:ident$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?>","highlight_start":1,"highlight_end":125},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $generated_variants:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t/// Dispatchable calls.","highlight_start":1,"highlight_end":26},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":92},{"text":"\t\t#[derive($crate::codec::Encode, $crate::codec::Decode)]","highlight_start":1,"highlight_end":58},{"text":"\t\tpub enum $call_type<$trait_instance: $trait_name$(<I>, $instance: $instantiable $( = $module_default_instance)?)?>","highlight_start":1,"highlight_end":117},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t#[codec(skip)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\t__PhantomItem($crate::sp_std::marker::PhantomData<($trait_instance, $($instance)?)>, $crate::Never),","highlight_start":1,"highlight_end":104},{"text":"\t\t\t$( $generated_variants )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t};","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t// The main macro expansion that actually renders the module code.","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t(@imp","highlight_start":1,"highlight_end":7},{"text":"\t\t$(#[$attr:meta])*","highlight_start":1,"highlight_end":20},{"text":"\t\tpub struct $mod_type:ident<","highlight_start":1,"highlight_end":30},{"text":"\t\t\t$trait_instance:ident: $trait_name:ident","highlight_start":1,"highlight_end":44},{"text":"\t\t\t$(<I>, $instance:ident: $instantiable:path $(= $module_default_instance:path)?)?","highlight_start":1,"highlight_end":84},{"text":"\t\t>","highlight_start":1,"highlight_end":4},{"text":"\t\tfor enum $call_type:ident where origin: $origin_type:ty, system = $system:ident {","highlight_start":1,"highlight_end":84},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$(#[doc = $doc_attr:tt])*","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t#[weight = $weight:expr]","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t$fn_vis:vis fn $fn_name:ident(","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\t$from:ident $( , $(#[$codec_attr:ident])* $param_name:ident : $param:ty)*","highlight_start":1,"highlight_end":79},{"text":"\t\t\t\t) $( -> $result:ty )* { $( $impl:tt )* }","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\t{ $($fn_instance:ident: $fn_instantiable:path)? }","highlight_start":1,"highlight_end":54},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t{ $( $other_where_bounds:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $deposit_event:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_initialize:tt )* }","highlight_start":1,"highlight_end":30},{"text":"\t\t{ $( $on_runtime_upgrade:tt )* }","highlight_start":1,"highlight_end":35},{"text":"\t\t{ $( $on_finalize:tt )* }","highlight_start":1,"highlight_end":28},{"text":"\t\t{ $( $offchain:tt )* }","highlight_start":1,"highlight_end":25},{"text":"\t\t{ $( $constants:tt )* }","highlight_start":1,"highlight_end":26},{"text":"\t\t{ $error_type:ty }","highlight_start":1,"highlight_end":21},{"text":"\t) => {","highlight_start":1,"highlight_end":8},{"text":"\t\t$crate::__check_reserved_fn_name! { $( $fn_name )* }","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Workaround for https://github.com/rust-lang/rust/issues/26925 . Remove when sorted.","highlight_start":1,"highlight_end":89},{"text":"\t\t#[derive(Clone, Copy, PartialEq, Eq, $crate::RuntimeDebug)]","highlight_start":1,"highlight_end":62},{"text":"\t\t$( #[$attr] )*","highlight_start":1,"highlight_end":17},{"text":"\t\tpub struct $mod_type<","highlight_start":1,"highlight_end":24},{"text":"\t\t\t$trait_instance: $trait_name","highlight_start":1,"highlight_end":32},{"text":"\t\t\t$(<I>, $instance: $instantiable $( = $module_default_instance)?)?","highlight_start":1,"highlight_end":69},{"text":"\t\t>($crate::sp_std::marker::PhantomData<($trait_instance, $( $instance)?)>) where","highlight_start":1,"highlight_end":82},{"text":"\t\t\t$( $other_where_bounds )*;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_initialize","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_initialize )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_runtime_upgrade","highlight_start":1,"highlight_end":28},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_runtime_upgrade )*","highlight_start":1,"highlight_end":29},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_on_finalize","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $on_finalize )*","highlight_start":1,"highlight_end":22},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_offchain","highlight_start":1,"highlight_end":18},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $offchain )*","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@impl_deposit_event","highlight_start":1,"highlight_end":23},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>;","highlight_start":1,"highlight_end":78},{"text":"\t\t\t$system;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $deposit_event )*","highlight_start":1,"highlight_end":24},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Can also be called using [`Call`].","highlight_start":1,"highlight_end":41},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":31},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t@impl_function","highlight_start":1,"highlight_end":20},{"text":"\t\t\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $fn_instance: $fn_instantiable)?>;","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t$origin_type;","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t$error_type;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$from;","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t$fn_vis fn $fn_name (","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\t$from $(, $param_name : $param )*","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t) $( -> $result )* { $( $impl )* }","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t$crate::decl_module! {","highlight_start":1,"highlight_end":25},{"text":"\t\t\t@create_call_enum","highlight_start":1,"highlight_end":21},{"text":"\t\t\t$call_type;","highlight_start":1,"highlight_end":15},{"text":"\t\t\t<$trait_instance: $trait_name $(<I>, $instance: $instantiable $(= $module_default_instance)? )?>","highlight_start":1,"highlight_end":100},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t{}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t$(","highlight_start":1,"highlight_end":6},{"text":"\t\t\t\tvariant $fn_name;","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[$codec_attr])*","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t$param;","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t)*","highlight_start":1,"highlight_end":6},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement weight calculation function for Call","highlight_start":1,"highlight_end":52},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetDispatchInfo","highlight_start":1,"highlight_end":105},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_dispatch_info(&self) -> $crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":67},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet base_weight = $weight;","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\t\t\t\tlet weight = <dyn $crate::dispatch::WeighData<( $( & $param, )* )>>::weigh_data(","highlight_start":1,"highlight_end":88},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet class = <dyn $crate::dispatch::ClassifyDispatch<( $( & $param, )* )>>::classify_dispatch(","highlight_start":1,"highlight_end":101},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\tlet pays_fee = <dyn $crate::dispatch::PaysFee<( $( & $param, )* )>>::pays_fee(","highlight_start":1,"highlight_end":86},{"text":"\t\t\t\t\t\t\t\t&base_weight,","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\t\t\t\t($( $param_name, )*)","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t);","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t$crate::dispatch::DispatchInfo {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\t\t\t\t\tweight,","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tclass,","highlight_start":1,"highlight_end":15},{"text":"\t\t\t\t\t\t\t\tpays_fee,","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// Implement GetCallName for the Call.","highlight_start":1,"highlight_end":41},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::GetCallName","highlight_start":1,"highlight_end":101},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn get_call_name(&self) -> &'static str {","highlight_start":1,"highlight_end":45},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\t// Don't generate any warnings for unused variables","highlight_start":1,"highlight_end":59},{"text":"\t\t\t\t\t\t\tlet _ = ( $( $param_name ),* );","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\tstringify!($fn_name)","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":93},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tfn get_call_names() -> &'static [&'static str] {","highlight_start":1,"highlight_end":52},{"text":"\t\t\t\t&[","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t]","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t// manual implementation of clone/eq/partialeq because using derive erroneously requires","highlight_start":1,"highlight_end":91},{"text":"\t\t// clone/eq/partialeq from T.","highlight_start":1,"highlight_end":32},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Clone","highlight_start":1,"highlight_end":95},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn clone(&self) -> Self {","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\t$call_type::$fn_name( $( (*$param_name).clone() ),* )","highlight_start":1,"highlight_end":61},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::PartialEq","highlight_start":1,"highlight_end":99},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn eq(&self, _other: &Self) -> bool {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) => {","highlight_start":1,"highlight_end":58},{"text":"\t\t\t\t\t\t\tlet self_params = ( $( $param_name, )* );","highlight_start":1,"highlight_end":49},{"text":"\t\t\t\t\t\t\tif let $call_type::$fn_name( $( ref $param_name ),* ) = *_other {","highlight_start":1,"highlight_end":73},{"text":"\t\t\t\t\t\t\t\tself_params == ( $( $param_name, )* )","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\t\t\t} else {","highlight_start":1,"highlight_end":16},{"text":"\t\t\t\t\t\t\t\tmatch *_other {","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\t\t\t\t$call_type::__PhantomItem(_, _) => unreachable!(),","highlight_start":1,"highlight_end":60},{"text":"\t\t\t\t\t\t\t\t\t_ => false,","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t\t\t}","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t}","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Eq","highlight_start":1,"highlight_end":92},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::fmt::Debug","highlight_start":1,"highlight_end":100},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn fmt(","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t&self,","highlight_start":1,"highlight_end":11},{"text":"\t\t\t\t_f: &mut $crate::dispatch::fmt::Formatter,","highlight_start":1,"highlight_end":47},{"text":"\t\t\t) -> $crate::dispatch::result::Result<(), $crate::dispatch::fmt::Error> {","highlight_start":1,"highlight_end":77},{"text":"\t\t\t\tmatch *self {","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( ref $param_name ),* ) =>","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t\t\twrite!(_f, \"{}{:?}\",","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\t\t\t\tstringify!($fn_name),","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\t\t\t\t( $( $param_name.clone(), )* )","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t,)*","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t_ => unreachable!(),","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Dispatchable","highlight_start":1,"highlight_end":102},{"text":"\t\t\tfor $call_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":83},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Trait = $trait_instance;","highlight_start":1,"highlight_end":33},{"text":"\t\t\ttype Origin = $origin_type;","highlight_start":1,"highlight_end":31},{"text":"\t\t\ttype Info = $crate::weights::DispatchInfo;","highlight_start":1,"highlight_end":46},{"text":"\t\t\ttype PostInfo = $crate::weights::PostDispatchInfo;","highlight_start":1,"highlight_end":54},{"text":"\t\t\tfn dispatch(self, _origin: Self::Origin) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":94},{"text":"\t\t\t\tmatch self {","highlight_start":1,"highlight_end":17},{"text":"\t\t\t\t\t$(","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t\t$call_type::$fn_name( $( $param_name ),* ) => {","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t\t\t\t$crate::decl_module!(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t\t\t@call","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$from","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t\t\t\t$mod_type<$trait_instance $(, $fn_instance)?> $fn_name _origin $system [ $( $param_name ),* ]","highlight_start":1,"highlight_end":102},{"text":"\t\t\t\t\t\t\t)","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t\t)*","highlight_start":1,"highlight_end":8},{"text":"\t\t\t\t\t$call_type::__PhantomItem(_, _) => { unreachable!(\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":97},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::Callable<$trait_instance>","highlight_start":1,"highlight_end":115},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\ttype Call = $call_type<$trait_instance $(, $instance)?>;","highlight_start":1,"highlight_end":60},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $mod_type<$trait_instance $(, $instance)?>","highlight_start":1,"highlight_end":114},{"text":"\t\t\twhere $( $other_where_bounds )*","highlight_start":1,"highlight_end":35},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\t#[doc(hidden)]","highlight_start":1,"highlight_end":18},{"text":"\t\t\tpub fn dispatch<D: $crate::dispatch::Dispatchable<Trait = $trait_instance, PostInfo = $crate::weights::PostDispatchInfo>>(","highlight_start":1,"highlight_end":126},{"text":"\t\t\t\td: D,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\torigin: D::Origin","highlight_start":1,"highlight_end":22},{"text":"\t\t\t) -> $crate::dispatch::DispatchResultWithPostInfo {","highlight_start":1,"highlight_end":55},{"text":"\t\t\t\td.dispatch(origin)","highlight_start":1,"highlight_end":23},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__dispatch_impl_metadata! {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$call_type $origin_type","highlight_start":1,"highlight_end":27},{"text":"\t\t\t{","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t$(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t$(#[doc = $doc_attr])*","highlight_start":1,"highlight_end":28},{"text":"\t\t\t\t\tfn $fn_name($from $(, $(#[$codec_attr])* $param_name : $param )*);","highlight_start":1,"highlight_end":72},{"text":"\t\t\t\t)*","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t\t$crate::__impl_module_constants_metadata ! {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t$mod_type<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?>","highlight_start":1,"highlight_end":77},{"text":"\t\t\t{ $( $other_where_bounds )* }","highlight_start":1,"highlight_end":33},{"text":"\t\t\t$( $constants )*","highlight_start":1,"highlight_end":20},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\timpl<$trait_instance: $trait_name $(<I>, $instance: $instantiable)?> $crate::dispatch::ModuleErrorMetadata","highlight_start":1,"highlight_end":109},{"text":"\t\t\tfor $mod_type<$trait_instance $(, $instance)?> where $( $other_where_bounds )*","highlight_start":1,"highlight_end":82},{"text":"\t\t{","highlight_start":1,"highlight_end":4},{"text":"\t\t\tfn metadata() -> &'static [$crate::dispatch::ErrorMetadata] {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t<$error_type as $crate::dispatch::ModuleErrorMetadata>::metadata()","highlight_start":1,"highlight_end":71},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0592]\u001b[0m\u001b[0m\u001b[1m: duplicate definitions with name `voting_period`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/kirstenrichard/Desktop/substrate-moloch-dao/pallets/template/src/lib.rs:102:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_storage! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    trait Store for Module<T: Trait> as MolochTemplate {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Members get(fn members): Vec<Member>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mduplicate definitions for `voting_period`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m// The pallet's dispatchable functions.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// The module declaration.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Initializing errors\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mother definition for `voting_period`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 16 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 16 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0412, E0425, E0573, E0592.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0412, E0425, E0573, E0592.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0412`.\u001b[0m\n"}
